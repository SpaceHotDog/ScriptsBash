#!groovy

def getProjectName() {
    return 'mc-web'
}

def getDockerLocation() {
    return '/usr/bin/docker'
}

def getEmailRecipients() {
    return 'eliana.rodriguez@sondeos.com.ar'
}

def URL = "http://git.snd.int/multichannel/web.git"

pipeline {
    agent any
    post {
        always {
            emailext body: '''${JELLY_SCRIPT,template="static-analysis"}''',
                    attachLog: true,
                    compressLog: true,
                    mimeType: 'text/html',
                    subject: "Pipeline Finalizada: ${currentBuild.fullDisplayName}",
                    to: "${params.EMAIL_RECIPIENTS}"
        }
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        aborted {
            updateGitlabCommitStatus name: 'build', state: 'canceled'
        }
        cleanup {
            cleanWs(disableDeferredWipeout: false, deleteDirs: true)
        }
    }

    options {
        gitLabConnection('GitLab Sondeos')
        skipDefaultCheckout(true)
    }

    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: false, branchFilterType: 'All')
    }

    parameters {
        string(defaultValue: "$emailRecipients", description: 'List of email recipients', name: 'EMAIL_RECIPIENTS')
        gitParameter name: 'GIT_TAG', type: 'PT_TAG', defaultValue: 'origin/master'
    }

    stages {
        stage ('Deployments'){
            parallel{
                stage ('Deploy en Desa'){
                    agent {label 'PREPRO - 10.56'}
                    steps {
                        script {
                            checkout scm

                            def isPre = {"${params.GIT_TAG}" == "origin/master"}

                            if(isPre) {
                                configFileProvider([configFile(fileId: 'afb24d99-e653-450d-9539-d7ba676dfd95',
                                        targetLocation: 'DeployWebPre.sh')]) {
                                    echo 'Archivo de Deploy copiado en el ambiente'
                                }

                                echo "Se comienza el DEPLOY en "+"${env.NODE_NAME}"
                                sh '/bin/bash '+'DeployWebPre.sh'
                                echo "Se finaliza el DEPLOY en "+"${env.NODE_NAME}"
                            }
                        }
                    }
                }

                stage ('Deploy en QA'){
                    agent {label 'QA - 105'}
                    steps {
                        script {
                            checkout([$class: 'GitSCM',
                                branches: [[name: "${params.GIT_TAG}"]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [[$class: 'LocalBranch', localBranch: "${params.GIT_TAG}"]],
                                submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'Soligna',
                                url: URL]]])

                            def isQA = "${params.GIT_TAG}".contains("q")

                            if(isQA) {
                                echo "TAG QA DETECTADO"

                                timeout(time:5, unit:'DAYS'){
                                        mail to: '${params.$emailRecipients}',
                                            from: 'YourFriendlyNeighbourJenkins',
                                            subject: "Se requiere aprovacion para: ${currentBuild.fullDisplayName}",
                                            body: "Se requiere aprovacion para proceder con el Deploy de ${currentBuild.fullDisplayName} en ${env.NODE_NAME}.\nAcceder al siguiente link: ${env.RUN_DISPLAY_URL}"
                                        input message:'Aprobar Deploy en QA?', submitter: "qa"

                                        configFileProvider([configFile(fileId: '34435747-434a-4190-870f-dc08b02d6051',
                                                targetLocation: 'DeployWeb.sh')]) {
                                            echo 'Script de Deploy copiado en el ambiente'
                                        }

                                        echo "Se comienza el DEPLOY en "+"${env.NODE_NAME}"
                                        sh '/bin/bash '+'DeployWeb.sh'
                                        echo "Se finaliza el DEPLOY en "+"${env.NODE_NAME}"
                                }
                            }
                            else {
                                echo "NO SE DETECTO TAG PARA QA. " + "Se omite el DEPLOY en "+"${env.NODE_NAME}"
                            }
                        }
                    }
                }
            }
        }
    }
}
